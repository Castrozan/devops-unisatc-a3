name: Testes e2e

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  workflow_dispatch:

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies
        run: npm install

      - name: Create .env file
        run: |
          echo "HOST=0.0.0.0" > .env
          echo "PORT=1337" >> .env
          echo "APP_KEYS=$(openssl rand -base64 32),$(openssl rand -base64 32)" >> .env
          echo "API_TOKEN_SALT=$(openssl rand -base64 32)" >> .env
          echo "ADMIN_JWT_SECRET=$(openssl rand -base64 32)" >> .env
          echo "TRANSFER_TOKEN_SALT=$(openssl rand -base64 32)" >> .env
          echo "JWT_SECRET=$(openssl rand -base64 32)" >> .env
          echo "DATABASE_CLIENT=sqlite" >> .env
          echo "DATABASE_FILENAME=.tmp/data.db" >> .env

      - name: Build Strapi
        run: npm run build

      - name: Run e2e tests
        run: npm run ci:e2e

  build:
    name: Build Strapi
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies
        run: npm install

      - name: Create .env file
        run: |
          echo "HOST=0.0.0.0" > .env
          echo "PORT=1337" >> .env
          echo "APP_KEYS=$(openssl rand -base64 32),$(openssl rand -base64 32)" >> .env
          echo "API_TOKEN_SALT=$(openssl rand -base64 32)" >> .env
          echo "ADMIN_JWT_SECRET=$(openssl rand -base64 32)" >> .env
          echo "TRANSFER_TOKEN_SALT=$(openssl rand -base64 32)" >> .env
          echo "JWT_SECRET=$(openssl rand -base64 32)" >> .env
          echo "DATABASE_CLIENT=sqlite" >> .env
          echo "DATABASE_FILENAME=.tmp/data.db" >> .env

      - name: Build Strapi
        run: npm run build

  manual-approval:
    name: Await Manual Approval
    runs-on: ubuntu-latest
    needs: [test, build]
    permissions:
      issues: write
    steps:
      - name: Await Manual Approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ github.event.pull_request.user.login }}
          minimum-approvals: 1
          issue-title: "Approve Docker Publish"
          issue-body: "Please comment 'approve' or 'deny' to proceed."

  publish-docker:
    name: Publish Docker Image
    runs-on: ubuntu-latest
    needs: [manual-approval]
    if: github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/devops-strapi:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/devops-strapi:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
